{"version":3,"sources":["context/teamsContext.js","components/teamsList.js","layout/navBar.js","components/roster.js","components/teamPage.js","App.js","serviceWorker.js","index.js"],"names":["TeamsContext","React","createContext","TeamsProvider","state","teams","_this2","this","fetch","then","results","json","data","sort","a","b","nameA","name","toUpperCase","nameB","setState","react_default","createElement","Provider","value","props","children","Component","TeamsConsumer","Consumer","TeamsList","_ref","className","map","_ref2","id","key","react_router_dom","to","concat","NavBar","teamsList","Roster","roster","_this","prevProps","prevState","franchise","length","filter","player","position","abbreviation","person","stats","splits","Number","stat","points","i","src","width","height","alt","firstName","lastName","jerseyNumber","games","goals","assists","pim","TeamPage","team","newTeam","context","find","parseInt","match","params","teamId","components_roster","contextType","Schedule","App","basename","teamsContext_TeamsProvider","navBar","react_router","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7739741e.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const TeamsContext = React.createContext();\n\nclass TeamsProvider extends React.Component {\n  state = {\n    teams: []\n  };\n  componentDidMount() {\n    fetch(`https://statsapi.web.nhl.com/api/v1/teams?expand=team.roster`)\n      .then(results => {\n        return results.json();\n      })\n      .then(data => {\n        let teams = data.teams.sort(function(a, b) {\n          let nameA = a.name.toUpperCase();\n          let nameB = b.name.toUpperCase();\n          if (nameA < nameB) {\n            return -1;\n          }\n          if (nameA > nameB) {\n            return 1;\n          }\n          return 0;\n        });\n        this.setState({ teams: teams });\n      });\n  }\n  render() {\n    return (\n      <TeamsContext.Provider value={{ teams: this.state.teams }}>\n        {this.props.children}\n      </TeamsContext.Provider>\n    );\n  }\n}\n\nconst TeamsConsumer = TeamsContext.Consumer;\n\nexport { TeamsProvider, TeamsConsumer };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { TeamsConsumer } from \"../context/teamsContext\";\n\nclass TeamsList extends React.Component {\n  render() {\n    return (\n      <TeamsConsumer>\n        {({ teams }) => (\n          <ul className=\"TeamsList\">\n            {teams.map(({ name, id }) => (\n              <li key={id}>\n                <Link to={`/teams/${id}`}>{name}</Link>\n              </li>\n            ))}\n          </ul>\n        )}\n      </TeamsConsumer>\n    );\n  }\n}\n\nexport default TeamsList;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport TeamsList from \"../components/teamsList\";\n\nconst NavBar = () => {\n  return (\n    <ul className=\"Menu\">\n      <li>\n        <Link to=\"/\">Schedule</Link>\n      </li>\n      <li>\n        Teams\n        <TeamsList />\n      </li>\n    </ul>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\n\nclass Roster extends React.Component {\n  state = {\n    roster: [],\n    id: this.props.id\n  };\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.id !== prevState.id && this.props.id !== prevProps.id) {\n      fetch(\n        `https://statsapi.web.nhl.com/api/v1/teams/${\n          this.props.id\n        }?hydrate=franchise(roster(season=20182019,person(name,stats(splits=statsSingleSeason))))`\n      )\n        .then(results => {\n          return results.json();\n        })\n        .then(data => {\n          this.setState({ roster: data.teams[0].franchise.roster.roster });\n        });\n    }\n  }\n  render() {\n    const { roster } = this.state;\n    if (roster.length > 0) {\n      return (\n        <table>\n          <thead>\n            <tr>\n              <th />\n              <th>First</th>\n              <th>Last</th>\n              <th>#</th>\n              <th>Pos</th>\n              <th>GP</th>\n              <th>G</th>\n              <th>A</th>\n              <th>Pts</th>\n              <th>PIM</th>\n            </tr>\n          </thead>\n          <tbody>\n            {roster\n              .filter(\n                player =>\n                  player.position.abbreviation !== \"G\" &&\n                  player.person.stats[0].splits[0]\n              )\n              .sort(\n                (a, b) =>\n                  Number(b.person.stats[0].splits[0].stat.points) -\n                  Number(a.person.stats[0].splits[0].stat.points)\n              )\n              .map((player, i) => {\n                const stats = player.person.stats[0].splits[0].stat;\n                return (\n                  <tr key={i}>\n                    <td>\n                      <img\n                        src={`https://nhl.bamcontent.com/images/headshots/current/168x168/${\n                          player.person.id\n                        }.jpg`}\n                        width=\"30\"\n                        height=\"30\"\n                        alt=\"\"\n                      />\n                    </td>\n                    <td>{player.person.firstName}</td>\n                    <td>{player.person.lastName}</td>\n                    <td>{player.jerseyNumber}</td>\n                    <td>{player.position.abbreviation}</td>\n                    <td>{stats.games}</td>\n                    <td>{stats.goals}</td>\n                    <td>{stats.assists}</td>\n                    <td>{stats.points}</td>\n                    <td>{stats.pim}</td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </table>\n      );\n    }\n    return null;\n  }\n}\n\nexport default Roster;\n","import React from \"react\";\nimport { TeamsContext } from \"../context/teamsContext\";\nimport Roster from \"./roster\";\n\nclass TeamPage extends React.Component {\n  state = {\n    team: []\n  };\n  componentDidUpdate() {\n    const newTeam = this.context.teams.find(\n      ({ id }) => id === parseInt(this.props.match.params.teamId)\n    );\n    if (newTeam.id !== this.state.team.id) {\n      this.setState({ team: newTeam });\n    }\n  }\n  render() {\n    const { team } = this.state;\n    return (\n      <div>\n        <h1>\n          {team.id && (\n            <img\n              src={`https://www-league.nhlstatic.com/images/logos/teams-current-primary-light/${\n                team.id\n              }.svg`}\n              width=\"60\"\n              height=\"60\"\n              alt=\"\"\n            />\n          )}\n          {team.name}\n        </h1>\n        <Roster id={team.id} />\n      </div>\n    );\n  }\n}\nTeamPage.contextType = TeamsContext;\n\nexport default TeamPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { TeamsProvider } from \"./context/teamsContext\";\nimport NavBar from \"./layout/navBar\";\nimport TeamPage from \"./components/teamPage\";\n\nfunction App() {\n  return (\n    <Router basename=\"/nhl\">\n      <div>\n        <TeamsProvider>\n          <NavBar />\n          <Route path={`/teams/:teamId`} component={TeamPage} />\n        </TeamsProvider>\n        <Route exact path=\"/\" component={Schedule} />\n      </div>\n    </Router>\n  );\n}\n\nfunction Schedule() {\n  return (\n    <div>\n      <h1>Schedule</h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}